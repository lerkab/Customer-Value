# -*- coding: utf-8 -*-
"""Customer Value

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1tMgt-n5my9K8uuHWbOpLumi6jVcPKX
"""

#Importing Important Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl

# Commented out IPython magic to ensure Python compatibility.
#Setting Whitegrid as white
# %matplotlib inline
sns.set_style('whitegrid')
# %matplotlib inline
plt.style.use('seaborn-whitegrid')
plt.rcParams['figure.figsize'] = [12, 6]

from google.colab import drive
drive.mount('/content/drive')

#Reading xlsx FILE
df = pd.read_excel('/content/drive/My Drive/Database_MKT/Dataset/Data.xlsx')

#CHECKING DATA IN TABULATED FORM
df.head()

#Checking dataframe variables and types
df.info()

#Checking Columns only
df.columns

#Checking unique products
df['Description'].unique()

#Let's look at some basic descriptives
df.describe()

df['Description'].value_counts()

#Creating df 2 for specific columns
df2 = df[['UnitPrice', 'Quantity', 'Country']].copy()
df2.info()

df2['total_sales'] = df2['UnitPrice'] * df2['Quantity']
df2.groupby('Country')['total_sales'].sum().round()

df2.head()

#Unique Function
df2['Country'].unique()

#Value count function
df2['Country'].value_counts()

df2.loc[df2['Country']=='United Kingdom', \
          ['total_sales',]].sum()

df3 = df2.loc[df2['Country']=='United Kingdom', \
          ['total_sales','Quantity','UnitPrice']]
df3.info()

#Change Name
df3.rename({'UnitPrice':'Price'},axis=1)

df3['total_sales'].plot(kind = 'kde',color='gray')

import datetime as dt

df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
df.info()

#Let's look at some basic descriptives
df['total_sales'] = df['UnitPrice']*df['Quantity'] 
df.info()

operations = {'total_sales':'sum',\
              'InvoiceDate':'first',\
              'CustomerID':'first'}
df = df.groupby('InvoiceNo').agg(operations)
df

df['year'] = df['InvoiceDate'].dt.year

df['days_since'] = (dt.datetime(year=2010, month=12, day=31) \
                    - df['InvoiceDate']).apply(lambda x: x.days)
df

operations = {'total_sales':'sum',\
              'days_since':['max','min','nunique']}

X = df[df['year'] == 2010].groupby('CustomerID').agg(operations)

X.head()

X.columns = [' '.join(col).strip() for col in X.columns.values]
X

X['avg_order_cost'] = X['total_sales sum']/X['days_since nunique']

y = df[df['year'] == 2011].groupby('CustomerID')['total_sales'].sum()

two_df = pd.concat([X,y], axis=1)
two_df.columns = ['revenue_2010',\
                       'days_since_first_purchase',\
                       'days_since_last_purchase',\
                       'number_of_purchases',\
                       'avg_order_cost',\
                       'revenue_2011']

two_df.head()

two_df = two_df[~two_df.revenue_2010.isnull()]
two_df = two_df[~two_df.revenue_2011.isnull()]
two_df = two_df[two_df.revenue_2010 \
               < ((two_df.revenue_2010.median()) \
               + two_df.revenue_2010.std()*3)]
two_df = two_df[two_df.revenue_2011 \
              < ((two_df.revenue_2011.median()) \
                 + two_df.revenue_2011.std()*3)]

two_df.to_csv('new_data.csv')

two_df.plot.scatter(x="days_since_first_purchase", \
                y="revenue_2010", \
                figsize=[6,6], color='gray')
plt.show()

two_df.plot.scatter(x="days_since_first_purchase", \
                y="revenue_2011", \
                figsize=[6,6], color='gray')
plt.show()

import seaborn as sns
sns.pairplot(two_df)
plt.show()

two_df.corr()

sns.pairplot(two_df, x_vars=two_df.columns, y_vars="revenue_2011")
plt.show()

X = two_df[['revenue_2010',\
        'days_since_first_purchase',\
        'days_since_last_purchase',\
        'number_of_purchases',\
        'avg_order_cost']]

y = two_df['revenue_2011']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 100)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train,y_train)

model.coef_

model.intercept_

A_customer = pd.DataFrame({
    'revenue_2019': [5000],
    'days_since_first_purchase': [50],
     'days_since_last_purchase': [10],
    'number_of_purchases': [2],
    'avg_order_cost': [500]})

model.predict(A_customer)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.scatter(model.predict(X_test), y_test)
plt.xlim(0,6000)
plt.ylim(0,6000)
plt.plot([0, 6000], [0, 6000], 'k-')
plt.xlabel('Model Predictions')
plt.ylabel('True Value')
plt.show()

np.corrcoef(model.predict(X_test), y_test)

#fit regression model
model.fit(X, y)

#calculate R-squared of regression model
r_squared = model.score(X, y)

#view R-squared value
print(r_squared)